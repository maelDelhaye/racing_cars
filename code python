# on rajoute random
import pyxel, random

# taille de la fenetre 256x256 pixels   
# ne pas modifier
pyxel.init(256, 256, title="Racing cars")

pyxel.load("res.pyxres")
pyxel.playm(0,loop=True)
# position initiale de la voiture
# (origine des positions de chaque élément)
voiture_x = 100
voiture_y = 200

arbre_x = 200
arbre_y = 120

arbre2_x = 20
arbre2_y = 80

arbre3_x = 30
arbre3_y = 140

grand_arbre_x = 220
grand_arbre_y = 170

grand_arbre2_x = 210
grand_arbre2_y = 20

grand_arbre3_x = 20
grand_arbre3_y = 30

coeur1_x = 210
coeur1_y = 5

coeur2_x = 220
coeur2_y = 5

coeur3_x = 230
coeur3_y = 5

coeur4_x = 240
coeur4_y = 5

maison_x = 10
maison_y = 180

maison2_x = 200
maison2_y = 50

# vies, points,tirs et initialisation des menu
vies = 4
point = 0
menu_debut = 0
menu_end = 0

# initialisation des tirs
tirs_liste = []

# initialisation des ennemis
ennemis_liste = []

# initialisation des explosions
explosions_liste = []

# chargement des images
pyxel.load("res.pyxres")

def menu_accueil(menu_debut):
    if pyxel.btnr(pyxel.KEY_RETURN):
        menu_debut = 1
    return menu_debut
    
def menu_fin(menu_end):
    if pyxel.btnr(pyxel.KEY_ESCAPE):
        menu_end = 1
    return menu_end

def voiture_deplacement(x, y):
    """déplacement avec les touches de directions"""

    if pyxel.btn(pyxel.KEY_RIGHT):
        if (x < 163) :
            x = x+3
    if pyxel.btn(pyxel.KEY_LEFT):
        if (x > 67) :
            x = x-3
    if pyxel.btn(pyxel.KEY_UP):
       if (y>0):
            y=y-3
    if pyxel.btn(pyxel.KEY_DOWN):
        if (y<240):
            y=y+3
    return x, y
    
def tirs_creation(x, y, tirs_liste):
    """création d'un tir avec la barre d'espace"""
    # btnr pour eviter les tirs multiples
    if len(tirs_liste)<5:
        if pyxel.btnr(pyxel.KEY_SPACE):
            tirs_liste.append([x+4, y-4])
    return tirs_liste


def tirs_deplacement(tirs_liste):
    """déplacement des tirs vers le haut et suppression s'ils sortent du cadre"""

    for tir in tirs_liste:
        tir[1] -= 5
        if  tir[1]<-8:
            tirs_liste.remove(tir)
    return tirs_liste


def ennemis_creation(ennemis_liste):
    """création aléatoire des ennemis"""
    ennemi_choix=random.randint(0,1)
    # augmentation du nombre d'ennemi en fonction des points
    
    if point>=200:
        if (pyxel.frame_count % 10 == 0):
            ennemis_liste.append([random.randint(78, 155),0,ennemi_choix])
    elif point>=160:
        if (pyxel.frame_count % 20 == 0):
            ennemis_liste.append([random.randint(78, 155),0,ennemi_choix])
    elif point>=120:
        if (pyxel.frame_count % 30 == 0):
            ennemis_liste.append([random.randint(78, 155),0,ennemi_choix])
    elif point>=80:
        if (pyxel.frame_count % 40 == 0):
            ennemis_liste.append([random.randint(78, 155),0,ennemi_choix])
    elif point>=40:
        if (pyxel.frame_count % 50 == 0):
            ennemis_liste.append([random.randint(78, 155),0,ennemi_choix])
    elif point>=20:
        if (pyxel.frame_count % 60 == 0):
            ennemis_liste.append([random.randint(78, 155),0,ennemi_choix])
    elif point<20:
        if (pyxel.frame_count % 70 == 0):
            ennemis_liste.append([random.randint(78, 155),0,ennemi_choix])
    return ennemis_liste


def ennemis_deplacement(ennemis_liste):
    """déplacement des ennemis vers le haut et suppression s'ils sortent du cadre"""

    for ennemi in ennemis_liste:
        ennemi[1] += 5
        if  ennemi[1]>256:
            ennemis_liste.remove(ennemi)
    return ennemis_liste


def voiture_suppression(vies):
    """disparition de la voiture et d'un ennemi si contact"""

    for ennemi in ennemis_liste:
        if ennemi[0] <= voiture_x+8 and ennemi[1] <= voiture_y+8 and ennemi[0]+8 >= voiture_x and ennemi[1]+8 >= voiture_y:
            ennemis_liste.remove(ennemi)
            vies -= 1
            # on ajoute l'explosion
            explosions_creation(voiture_x, voiture_y)
    return vies

                
def ennemis_suppression(point):
    """disparition d'un ennemi et d'un tir si contact plus gain de point"""

    for ennemi in ennemis_liste:
        for tir in tirs_liste:
            if ennemi[0] <= tir[0]+1 and ennemi[0]+8 >= tir[0] and ennemi[1]+8 >= tir[1]:
                ennemis_liste.remove(ennemi)
                tirs_liste.remove(tir)
                # on ajoute l'explosion et les points
                explosions_creation(ennemi[0], ennemi[1])
                point +=10
    return point


def explosions_creation(x, y):
    """explosions aux points de collision entre deux objets"""
    explosions_liste.append([x, y, 0])


def explosions_animation():
    """animation des explosions"""
    for explosion in explosions_liste:
        explosion[2] +=1
        if explosion[2] == 12:
            explosions_liste.remove(explosion)                
    

# =========================================================
# == UPDATE
# =========================================================
def update():
    """mise à jour des variables (30 fois par seconde)"""

    global voiture_x, voiture_y, tirs_liste, ennemis_liste, vies, explosions_liste, point, tirs, menu_debut,menu_end 

    # mise à jour de la position du vaisseau
    voiture_x, voiture_y = voiture_deplacement(voiture_x, voiture_y)

    # creation des tirs en fonction de la position de la voiutre
    tirs_liste = tirs_creation(voiture_x, voiture_y, tirs_liste)
    
    # mise à jour des menus
    menu_debut = menu_accueil(menu_debut)
    menu_end = menu_fin(menu_end)

    if menu_debut==1:
        # mise a jour des positions des tirs
        tirs_liste = tirs_deplacement(tirs_liste)

        # creation des ennemis
        ennemis_liste = ennemis_creation(ennemis_liste)

        # mise a jour des positions des ennemis
        ennemis_liste = ennemis_deplacement(ennemis_liste)

        # suppression des ennemis et tirs si contact
        point = ennemis_suppression(point)

        # suppression de la voiture et ennemi si contact
        vies = voiture_suppression(vies)


        # evolution de l'animation des explosions
        explosions_animation()    

# =========================================================
# == DRAW
# =========================================================
def draw():
    """création des objets (30 fois par seconde)"""
    pyxel.bltm(0, 0, 2, 512, 256, 256, 256)
    # menu d'accueil
    
    if menu_debut == 1:
    
    # vide la fenetre    
        pyxel.cls(0)

        # si le joueur possede des vies le jeu continue
        if vies > 0:
        
            pyxel.bltm(0, 0, 0, 512, 256, 256, 256)
        
            # affichage des vies et des points           
            pyxel.text(5,5, 'VIES:'+ str(vies), 7)
            pyxel.text(5,15, 'POINTS:'+ str(point), 7)
        
            # affichage du decors
            pyxel.blt(maison_x, maison_y, 0, 16, 96, 32, 56,0)
            pyxel.blt(maison2_x, maison2_y, 0, 16, 96, 32, 56,0)
            pyxel.blt(coeur4_x, coeur4_y, 0, 40, 48, 8, 8,0)
            pyxel.blt(coeur1_x, coeur1_y, 0, 40, 48, 8, 8,0)
            pyxel.blt(coeur2_x, coeur2_y, 0, 40, 48, 8, 8,0)
            pyxel.blt(coeur3_x, coeur3_y, 0, 40, 48, 8, 8,0)
            pyxel.blt(voiture_x, voiture_y, 0, 32, 16, 16, 16,0)
            pyxel.blt(arbre_x, arbre_y, 0, 48, 0, 16, 16,0)
            pyxel.blt(arbre2_x, arbre2_y, 0, 48, 0, 16, 16,0)
            pyxel.blt(arbre3_x, arbre3_y, 0, 48, 0, 16, 16,0)
            pyxel.blt(grand_arbre_x, grand_arbre_y, 0, 0, 64, 32, 32,0)
            pyxel.blt(grand_arbre2_x, grand_arbre2_y, 0, 0, 64, 32, 32,0)
            pyxel.blt(grand_arbre3_x, grand_arbre3_y, 0, 0, 64, 32, 32,0)
        
            # tirs
            for tir in tirs_liste:
                pyxel.blt(tir[0], tir[1], 0, 8, 8, 8, 8,0)
        
            # ennemis
            i=0
            for ennemi in ennemis_liste:
                pyxel.blt(ennemi[0], ennemi[1], 0, (ennemi[2])*16, 16, 16, 16,0)
                i+=1
        
            # explosions (cercles de plus en plus grands)
            for explosion in explosions_liste:
                pyxel.circb(explosion[0]+4, explosion[1]+4, 2*(explosion[2]//4), 8+explosion[2]%3)   
        # un coeur s'enlève quand le joueur perds une vie
        if vies == 3 : 
            pyxel.blt(coeur1_x, coeur1_y, 0, 40, 56, 8, 8,0)
            
        if vies == 2 : 
            pyxel.blt(coeur1_x, coeur1_y, 0, 40, 56, 8, 8,0)
            pyxel.blt(coeur2_x, coeur2_y, 0, 40, 56, 8, 8,0)
            
        if vies == 1 : 
            pyxel.blt(coeur1_x, coeur1_y, 0, 40, 56, 8, 8,0)
            pyxel.blt(coeur2_x, coeur2_y, 0, 40, 56, 8, 8,0)
            pyxel.blt(coeur3_x, coeur3_y, 0, 40, 56, 8, 8,0)
                
        # affichage du menu de fin, game over
        if menu_end == 1 or vies == 0:
                pyxel.bltm(0, 0, 1, 512, 256, 256, 256)
                pyxel.text(160,90, 'GAME OVER', 0)
                pyxel.text(154,110, 'VOTRE SCORE: '+str(point), 0)
                pyxel.stop()

      


pyxel.run(update, draw)
